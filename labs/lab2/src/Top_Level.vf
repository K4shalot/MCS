////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Top_Level.vf
// /___/   /\     Timestamp : 05/26/2022 23:05:11
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3a -verilog D:/Lab/LAB2/Top_Level.vf -w D:/Lab/LAB2/Top_Level.sch
//Design Name: Top_Level
//Device: spartan3a
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CC8RE_HXILINX_Top_Level(CEO, Q, TC, C, CE, R);
   
   parameter TERMINAL_COUNT = 8'b1111_1111;
   
   output             CEO;
   output [7:0]       Q;
   output             TC;
   
   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg  [7:0]         Q;
   
   always @(posedge C)
     begin
	if (R)
	  Q <= 8'b0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = R ? 1'b0 : (Q == TERMINAL_COUNT); 
   
endmodule
`timescale 100 ps / 10 ps

module CC16RE_HXILINX_Top_Level(CEO, Q, TC, C, CE, R);

   parameter TERMINAL_COUNT = 16'b1111_1111_1111_1111;
   
   output             CEO;
   output [15:0]      Q;
   output             TC;
   
   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg    [15:0]      Q;
   
   always @(posedge C)
     begin
	if (R)
	  Q <= 16'b0000_0000_0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = R ? 1'b0 : (Q == TERMINAL_COUNT); 
   
endmodule
`timescale 1ns / 1ps

module Light_Controller_MUSER_Top_Level(CLK, 
                                        MODE, 
                                        RESET, 
                                        OUT_Bus);

    input CLK;
    input MODE;
    input RESET;
   output [7:0] OUT_Bus;
   
   wire [2:0] Current_State_Bus;
   wire [2:0] Next_State_Bus;
   
   Out_Logic_intf  XLXI_1 (.IN_BUS(Current_State_Bus[2:0]), 
                          .OUT_BUS(OUT_Bus[7:0]));
   Transition_Logic_intf  XLXI_2 (.CUR_STATE(Current_State_Bus[2:0]), 
                                 .MODE(MODE), 
                                 .NEXT_STATE(Next_State_Bus[2:0]));
   FDC #( .INIT(1'b0) ) XLXI_3 (.C(CLK), 
               .CLR(RESET), 
               .D(Next_State_Bus[1]), 
               .Q(Current_State_Bus[1]));
   FDC #( .INIT(1'b0) ) XLXI_4 (.C(CLK), 
               .CLR(RESET), 
               .D(Next_State_Bus[0]), 
               .Q(Current_State_Bus[0]));
   FDC #( .INIT(1'b0) ) XLXI_5 (.C(CLK), 
               .CLR(RESET), 
               .D(Next_State_Bus[2]), 
               .Q(Current_State_Bus[2]));
endmodule
`timescale 1ns / 1ps

module Top_Level(CLK, 
                 MODE, 
                 RESET, 
                 Test, 
                 OUT_LED_0, 
                 OUT_LED_1, 
                 OUT_LED_2, 
                 OUT_LED_3, 
                 OUT_LED_4, 
                 OUT_LED_5, 
                 OUT_LED_6, 
                 OUT_LED_7);

    input CLK;
    input MODE;
    input RESET;
    input Test;
   output OUT_LED_0;
   output OUT_LED_1;
   output OUT_LED_2;
   output OUT_LED_3;
   output OUT_LED_4;
   output OUT_LED_5;
   output OUT_LED_6;
   output OUT_LED_7;
   
   wire [7:0] Clock_BUS;
   wire [7:0] OUT_BUS;
   wire XLXN_74;
   wire XLXN_76;
   wire XLXN_110;
   wire XLXN_112;
   
   assign XLXN_74 = 1;
   Light_Controller_MUSER_Top_Level  XLXI_32 (.CLK(Clock_BUS[5]), 
                                             .MODE(MODE), 
                                             .RESET(XLXN_76), 
                                             .OUT_Bus(OUT_BUS[7:0]));
   INV  XLXI_40 (.I(RESET), 
                .O(XLXN_76));
   OR2  XLXI_45 (.I0(XLXN_110), 
                .I1(OUT_BUS[7]), 
                .O(OUT_LED_7));
   OR2  XLXI_46 (.I0(XLXN_110), 
                .I1(OUT_BUS[6]), 
                .O(OUT_LED_6));
   OR2  XLXI_47 (.I0(XLXN_110), 
                .I1(OUT_BUS[5]), 
                .O(OUT_LED_5));
   OR2  XLXI_48 (.I0(XLXN_110), 
                .I1(OUT_BUS[4]), 
                .O(OUT_LED_4));
   OR2  XLXI_49 (.I0(XLXN_110), 
                .I1(OUT_BUS[3]), 
                .O(OUT_LED_3));
   OR2  XLXI_50 (.I0(XLXN_110), 
                .I1(OUT_BUS[2]), 
                .O(OUT_LED_2));
   OR2  XLXI_52 (.I0(XLXN_110), 
                .I1(OUT_BUS[1]), 
                .O(OUT_LED_1));
   OR2  XLXI_53 (.I0(XLXN_110), 
                .I1(OUT_BUS[0]), 
                .O(OUT_LED_0));
   INV  XLXI_93 (.I(Test), 
                .O(XLXN_110));
   (* HU_SET = "XLXI_95_0" *) 
   CC8RE_HXILINX_Top_Level  XLXI_95 (.C(XLXN_112), 
                                    .CE(XLXN_74), 
                                    .R(XLXN_76), 
                                    .CEO(), 
                                    .Q(Clock_BUS[7:0]), 
                                    .TC());
   (* HU_SET = "XLXI_96_1" *) 
   CC16RE_HXILINX_Top_Level  XLXI_96 (.C(CLK), 
                                     .CE(XLXN_74), 
                                     .R(XLXN_76), 
                                     .CEO(), 
                                     .Q(), 
                                     .TC(XLXN_112));
endmodule
